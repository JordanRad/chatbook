// Code generated by counterfeiter. DO NOT EDIT.
package jwtfakes

import (
	"sync"

	"github.com/JordanRad/chatbook/services/internal/auth/jwt"
)

type FakeJWTClient struct {
	ExtractJWTCLaimsStub        func(string) (jwt.TokenClaims, error)
	extractJWTCLaimsMutex       sync.RWMutex
	extractJWTCLaimsArgsForCall []struct {
		arg1 string
	}
	extractJWTCLaimsReturns struct {
		result1 jwt.TokenClaims
		result2 error
	}
	extractJWTCLaimsReturnsOnCall map[int]struct {
		result1 jwt.TokenClaims
		result2 error
	}
	GenerateJWTStub        func(string, string, bool) (string, error)
	generateJWTMutex       sync.RWMutex
	generateJWTArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	generateJWTReturns struct {
		result1 string
		result2 error
	}
	generateJWTReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ValidateJWTStub        func(string) (bool, error)
	validateJWTMutex       sync.RWMutex
	validateJWTArgsForCall []struct {
		arg1 string
	}
	validateJWTReturns struct {
		result1 bool
		result2 error
	}
	validateJWTReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJWTClient) ExtractJWTCLaims(arg1 string) (jwt.TokenClaims, error) {
	fake.extractJWTCLaimsMutex.Lock()
	ret, specificReturn := fake.extractJWTCLaimsReturnsOnCall[len(fake.extractJWTCLaimsArgsForCall)]
	fake.extractJWTCLaimsArgsForCall = append(fake.extractJWTCLaimsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ExtractJWTCLaimsStub
	fakeReturns := fake.extractJWTCLaimsReturns
	fake.recordInvocation("ExtractJWTCLaims", []interface{}{arg1})
	fake.extractJWTCLaimsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJWTClient) ExtractJWTCLaimsCallCount() int {
	fake.extractJWTCLaimsMutex.RLock()
	defer fake.extractJWTCLaimsMutex.RUnlock()
	return len(fake.extractJWTCLaimsArgsForCall)
}

func (fake *FakeJWTClient) ExtractJWTCLaimsCalls(stub func(string) (jwt.TokenClaims, error)) {
	fake.extractJWTCLaimsMutex.Lock()
	defer fake.extractJWTCLaimsMutex.Unlock()
	fake.ExtractJWTCLaimsStub = stub
}

func (fake *FakeJWTClient) ExtractJWTCLaimsArgsForCall(i int) string {
	fake.extractJWTCLaimsMutex.RLock()
	defer fake.extractJWTCLaimsMutex.RUnlock()
	argsForCall := fake.extractJWTCLaimsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJWTClient) ExtractJWTCLaimsReturns(result1 jwt.TokenClaims, result2 error) {
	fake.extractJWTCLaimsMutex.Lock()
	defer fake.extractJWTCLaimsMutex.Unlock()
	fake.ExtractJWTCLaimsStub = nil
	fake.extractJWTCLaimsReturns = struct {
		result1 jwt.TokenClaims
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) ExtractJWTCLaimsReturnsOnCall(i int, result1 jwt.TokenClaims, result2 error) {
	fake.extractJWTCLaimsMutex.Lock()
	defer fake.extractJWTCLaimsMutex.Unlock()
	fake.ExtractJWTCLaimsStub = nil
	if fake.extractJWTCLaimsReturnsOnCall == nil {
		fake.extractJWTCLaimsReturnsOnCall = make(map[int]struct {
			result1 jwt.TokenClaims
			result2 error
		})
	}
	fake.extractJWTCLaimsReturnsOnCall[i] = struct {
		result1 jwt.TokenClaims
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) GenerateJWT(arg1 string, arg2 string, arg3 bool) (string, error) {
	fake.generateJWTMutex.Lock()
	ret, specificReturn := fake.generateJWTReturnsOnCall[len(fake.generateJWTArgsForCall)]
	fake.generateJWTArgsForCall = append(fake.generateJWTArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.GenerateJWTStub
	fakeReturns := fake.generateJWTReturns
	fake.recordInvocation("GenerateJWT", []interface{}{arg1, arg2, arg3})
	fake.generateJWTMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJWTClient) GenerateJWTCallCount() int {
	fake.generateJWTMutex.RLock()
	defer fake.generateJWTMutex.RUnlock()
	return len(fake.generateJWTArgsForCall)
}

func (fake *FakeJWTClient) GenerateJWTCalls(stub func(string, string, bool) (string, error)) {
	fake.generateJWTMutex.Lock()
	defer fake.generateJWTMutex.Unlock()
	fake.GenerateJWTStub = stub
}

func (fake *FakeJWTClient) GenerateJWTArgsForCall(i int) (string, string, bool) {
	fake.generateJWTMutex.RLock()
	defer fake.generateJWTMutex.RUnlock()
	argsForCall := fake.generateJWTArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeJWTClient) GenerateJWTReturns(result1 string, result2 error) {
	fake.generateJWTMutex.Lock()
	defer fake.generateJWTMutex.Unlock()
	fake.GenerateJWTStub = nil
	fake.generateJWTReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) GenerateJWTReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateJWTMutex.Lock()
	defer fake.generateJWTMutex.Unlock()
	fake.GenerateJWTStub = nil
	if fake.generateJWTReturnsOnCall == nil {
		fake.generateJWTReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateJWTReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) ValidateJWT(arg1 string) (bool, error) {
	fake.validateJWTMutex.Lock()
	ret, specificReturn := fake.validateJWTReturnsOnCall[len(fake.validateJWTArgsForCall)]
	fake.validateJWTArgsForCall = append(fake.validateJWTArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateJWTStub
	fakeReturns := fake.validateJWTReturns
	fake.recordInvocation("ValidateJWT", []interface{}{arg1})
	fake.validateJWTMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJWTClient) ValidateJWTCallCount() int {
	fake.validateJWTMutex.RLock()
	defer fake.validateJWTMutex.RUnlock()
	return len(fake.validateJWTArgsForCall)
}

func (fake *FakeJWTClient) ValidateJWTCalls(stub func(string) (bool, error)) {
	fake.validateJWTMutex.Lock()
	defer fake.validateJWTMutex.Unlock()
	fake.ValidateJWTStub = stub
}

func (fake *FakeJWTClient) ValidateJWTArgsForCall(i int) string {
	fake.validateJWTMutex.RLock()
	defer fake.validateJWTMutex.RUnlock()
	argsForCall := fake.validateJWTArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJWTClient) ValidateJWTReturns(result1 bool, result2 error) {
	fake.validateJWTMutex.Lock()
	defer fake.validateJWTMutex.Unlock()
	fake.ValidateJWTStub = nil
	fake.validateJWTReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) ValidateJWTReturnsOnCall(i int, result1 bool, result2 error) {
	fake.validateJWTMutex.Lock()
	defer fake.validateJWTMutex.Unlock()
	fake.ValidateJWTStub = nil
	if fake.validateJWTReturnsOnCall == nil {
		fake.validateJWTReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.validateJWTReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.extractJWTCLaimsMutex.RLock()
	defer fake.extractJWTCLaimsMutex.RUnlock()
	fake.generateJWTMutex.RLock()
	defer fake.generateJWTMutex.RUnlock()
	fake.validateJWTMutex.RLock()
	defer fake.validateJWTMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJWTClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jwt.JWTClient = new(FakeJWTClient)
