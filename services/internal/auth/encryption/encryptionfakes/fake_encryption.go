// Code generated by counterfeiter. DO NOT EDIT.
package encryptionfakes

import (
	"sync"

	"github.com/JordanRad/chatbook/services/internal/auth/encryption"
)

type FakeEncryption struct {
	CheckPasswordStub        func(string, string) bool
	checkPasswordMutex       sync.RWMutex
	checkPasswordArgsForCall []struct {
		arg1 string
		arg2 string
	}
	checkPasswordReturns struct {
		result1 bool
	}
	checkPasswordReturnsOnCall map[int]struct {
		result1 bool
	}
	EncryptPasswordStub        func(string) (string, error)
	encryptPasswordMutex       sync.RWMutex
	encryptPasswordArgsForCall []struct {
		arg1 string
	}
	encryptPasswordReturns struct {
		result1 string
		result2 error
	}
	encryptPasswordReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncryption) CheckPassword(arg1 string, arg2 string) bool {
	fake.checkPasswordMutex.Lock()
	ret, specificReturn := fake.checkPasswordReturnsOnCall[len(fake.checkPasswordArgsForCall)]
	fake.checkPasswordArgsForCall = append(fake.checkPasswordArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CheckPasswordStub
	fakeReturns := fake.checkPasswordReturns
	fake.recordInvocation("CheckPassword", []interface{}{arg1, arg2})
	fake.checkPasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEncryption) CheckPasswordCallCount() int {
	fake.checkPasswordMutex.RLock()
	defer fake.checkPasswordMutex.RUnlock()
	return len(fake.checkPasswordArgsForCall)
}

func (fake *FakeEncryption) CheckPasswordCalls(stub func(string, string) bool) {
	fake.checkPasswordMutex.Lock()
	defer fake.checkPasswordMutex.Unlock()
	fake.CheckPasswordStub = stub
}

func (fake *FakeEncryption) CheckPasswordArgsForCall(i int) (string, string) {
	fake.checkPasswordMutex.RLock()
	defer fake.checkPasswordMutex.RUnlock()
	argsForCall := fake.checkPasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEncryption) CheckPasswordReturns(result1 bool) {
	fake.checkPasswordMutex.Lock()
	defer fake.checkPasswordMutex.Unlock()
	fake.CheckPasswordStub = nil
	fake.checkPasswordReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeEncryption) CheckPasswordReturnsOnCall(i int, result1 bool) {
	fake.checkPasswordMutex.Lock()
	defer fake.checkPasswordMutex.Unlock()
	fake.CheckPasswordStub = nil
	if fake.checkPasswordReturnsOnCall == nil {
		fake.checkPasswordReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.checkPasswordReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeEncryption) EncryptPassword(arg1 string) (string, error) {
	fake.encryptPasswordMutex.Lock()
	ret, specificReturn := fake.encryptPasswordReturnsOnCall[len(fake.encryptPasswordArgsForCall)]
	fake.encryptPasswordArgsForCall = append(fake.encryptPasswordArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.EncryptPasswordStub
	fakeReturns := fake.encryptPasswordReturns
	fake.recordInvocation("EncryptPassword", []interface{}{arg1})
	fake.encryptPasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEncryption) EncryptPasswordCallCount() int {
	fake.encryptPasswordMutex.RLock()
	defer fake.encryptPasswordMutex.RUnlock()
	return len(fake.encryptPasswordArgsForCall)
}

func (fake *FakeEncryption) EncryptPasswordCalls(stub func(string) (string, error)) {
	fake.encryptPasswordMutex.Lock()
	defer fake.encryptPasswordMutex.Unlock()
	fake.EncryptPasswordStub = stub
}

func (fake *FakeEncryption) EncryptPasswordArgsForCall(i int) string {
	fake.encryptPasswordMutex.RLock()
	defer fake.encryptPasswordMutex.RUnlock()
	argsForCall := fake.encryptPasswordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEncryption) EncryptPasswordReturns(result1 string, result2 error) {
	fake.encryptPasswordMutex.Lock()
	defer fake.encryptPasswordMutex.Unlock()
	fake.EncryptPasswordStub = nil
	fake.encryptPasswordReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEncryption) EncryptPasswordReturnsOnCall(i int, result1 string, result2 error) {
	fake.encryptPasswordMutex.Lock()
	defer fake.encryptPasswordMutex.Unlock()
	fake.EncryptPasswordStub = nil
	if fake.encryptPasswordReturnsOnCall == nil {
		fake.encryptPasswordReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.encryptPasswordReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEncryption) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkPasswordMutex.RLock()
	defer fake.checkPasswordMutex.RUnlock()
	fake.encryptPasswordMutex.RLock()
	defer fake.encryptPasswordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEncryption) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ encryption.Encryption = new(FakeEncryption)
