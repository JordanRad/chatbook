// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chatbook-microservices gRPC client CLI support package
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package cli

import (
	"flag"
	"fmt"
	"os"

	notificationc "github.com/JordanRad/chatbook/services/internal/gen/grpc/notification/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `notification notify-user-names-update
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` notification notify-user-names-update --message '{
      "firstName": "Amet quia vero illum.",
      "id": "Aut facere molestiae cumque quia blanditiis quos.",
      "lastName": "Enim vel sapiente.",
      "oldFirstName": "Quidem sapiente ex et sunt earum.",
      "oldLastName": "Molestiae similique omnis voluptate pariatur non.",
      "ts": "Cum soluta possimus accusamus similique quibusdam."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		notificationFlags = flag.NewFlagSet("notification", flag.ContinueOnError)

		notificationNotifyUserNamesUpdateFlags       = flag.NewFlagSet("notify-user-names-update", flag.ExitOnError)
		notificationNotifyUserNamesUpdateMessageFlag = notificationNotifyUserNamesUpdateFlags.String("message", "", "")
	)
	notificationFlags.Usage = notificationUsage
	notificationNotifyUserNamesUpdateFlags.Usage = notificationNotifyUserNamesUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "notification":
			svcf = notificationFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "notification":
			switch epn {
			case "notify-user-names-update":
				epf = notificationNotifyUserNamesUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "notification":
			c := notificationc.NewClient(cc, opts...)
			switch epn {
			case "notify-user-names-update":
				endpoint = c.NotifyUserNamesUpdate()
				data, err = notificationc.BuildNotifyUserNamesUpdatePayload(*notificationNotifyUserNamesUpdateMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// notificationUsage displays the usage of the notification command and its
// subcommands.
func notificationUsage() {
	fmt.Fprintf(os.Stderr, `Notification service is responsible for handling user data and requests
Usage:
    %[1]s [globalflags] notification COMMAND [flags]

COMMAND:
    notify-user-names-update: NotifyUserNamesUpdate implements notifyUserNamesUpdate.

Additional help:
    %[1]s notification COMMAND --help
`, os.Args[0])
}
func notificationNotifyUserNamesUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] notification notify-user-names-update -message JSON

NotifyUserNamesUpdate implements notifyUserNamesUpdate.
    -message JSON: 

Example:
    %[1]s notification notify-user-names-update --message '{
      "firstName": "Amet quia vero illum.",
      "id": "Aut facere molestiae cumque quia blanditiis quos.",
      "lastName": "Enim vel sapiente.",
      "oldFirstName": "Quidem sapiente ex et sunt earum.",
      "oldLastName": "Molestiae similique omnis voluptate pariatur non.",
      "ts": "Cum soluta possimus accusamus similique quibusdam."
   }'
`, os.Args[0])
}
