// Code generated by goa v3.11.3, DO NOT EDIT.
//
// notification gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package server

import (
	"context"

	notificationpb "github.com/JordanRad/chatbook/services/internal/gen/grpc/notification/pb"
	notification "github.com/JordanRad/chatbook/services/internal/gen/notification"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeNotifyUserNamesUpdateResponse encodes responses from the
// "notification" service "notifyUserNamesUpdate" endpoint.
func EncodeNotifyUserNamesUpdateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*notification.BlankResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("notification", "notifyUserNamesUpdate", "*notification.BlankResponse", v)
	}
	resp := NewProtoNotifyUserNamesUpdateResponse(result)
	return resp, nil
}

// DecodeNotifyUserNamesUpdateRequest decodes requests sent to "notification"
// service "notifyUserNamesUpdate" endpoint.
func DecodeNotifyUserNamesUpdateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *notificationpb.NotifyUserNamesUpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*notificationpb.NotifyUserNamesUpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("notification", "notifyUserNamesUpdate", "*notificationpb.NotifyUserNamesUpdateRequest", v)
		}
	}
	var payload *notification.NotifyUserNamesUpdatePayload
	{
		payload = NewNotifyUserNamesUpdatePayload(message)
	}
	return payload, nil
}
