// Code generated by goa v3.11.3, DO NOT EDIT.
//
// notification gRPC server
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package server

import (
	"context"

	notificationpb "github.com/JordanRad/chatbook/services/internal/gen/grpc/notification/pb"
	notification "github.com/JordanRad/chatbook/services/internal/gen/notification"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the notificationpb.NotificationServer interface.
type Server struct {
	NotifyUserNamesUpdateH goagrpc.UnaryHandler
	notificationpb.UnimplementedNotificationServer
}

// New instantiates the server struct with the notification service endpoints.
func New(e *notification.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		NotifyUserNamesUpdateH: NewNotifyUserNamesUpdateHandler(e.NotifyUserNamesUpdate, uh),
	}
}

// NewNotifyUserNamesUpdateHandler creates a gRPC handler which serves the
// "notification" service "notifyUserNamesUpdate" endpoint.
func NewNotifyUserNamesUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeNotifyUserNamesUpdateRequest, EncodeNotifyUserNamesUpdateResponse)
	}
	return h
}

// NotifyUserNamesUpdate implements the "NotifyUserNamesUpdate" method in
// notificationpb.NotificationServer interface.
func (s *Server) NotifyUserNamesUpdate(ctx context.Context, message *notificationpb.NotifyUserNamesUpdateRequest) (*notificationpb.NotifyUserNamesUpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "notifyUserNamesUpdate")
	ctx = context.WithValue(ctx, goa.ServiceKey, "notification")
	resp, err := s.NotifyUserNamesUpdateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*notificationpb.NotifyUserNamesUpdateResponse), nil
}
