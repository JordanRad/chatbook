// Code generated by goa v3.11.3, DO NOT EDIT.
//
// notification gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	"context"

	notificationpb "github.com/JordanRad/chatbook/services/internal/gen/grpc/notification/pb"
	notification "github.com/JordanRad/chatbook/services/internal/gen/notification"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildNotifyUserNamesUpdateFunc builds the remote method to invoke for
// "notification" service "notifyUserNamesUpdate" endpoint.
func BuildNotifyUserNamesUpdateFunc(grpccli notificationpb.NotificationClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.NotifyUserNamesUpdate(ctx, reqpb.(*notificationpb.NotifyUserNamesUpdateRequest), opts...)
		}
		return grpccli.NotifyUserNamesUpdate(ctx, &notificationpb.NotifyUserNamesUpdateRequest{}, opts...)
	}
}

// EncodeNotifyUserNamesUpdateRequest encodes requests sent to notification
// notifyUserNamesUpdate endpoint.
func EncodeNotifyUserNamesUpdateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*notification.NotifyUserNamesUpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("notification", "notifyUserNamesUpdate", "*notification.NotifyUserNamesUpdatePayload", v)
	}
	return NewProtoNotifyUserNamesUpdateRequest(payload), nil
}
