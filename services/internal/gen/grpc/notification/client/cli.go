// Code generated by goa v3.11.3, DO NOT EDIT.
//
// notification gRPC client CLI support package
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	"encoding/json"
	"fmt"

	notificationpb "github.com/JordanRad/chatbook/services/internal/gen/grpc/notification/pb"
	notification "github.com/JordanRad/chatbook/services/internal/gen/notification"
)

// BuildNotifyUserNamesUpdatePayload builds the payload for the notification
// notifyUserNamesUpdate endpoint from CLI flags.
func BuildNotifyUserNamesUpdatePayload(notificationNotifyUserNamesUpdateMessage string) (*notification.NotifyUserNamesUpdatePayload, error) {
	var err error
	var message notificationpb.NotifyUserNamesUpdateRequest
	{
		if notificationNotifyUserNamesUpdateMessage != "" {
			err = json.Unmarshal([]byte(notificationNotifyUserNamesUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"firstName\": \"Dolores officiis vitae quidem.\",\n      \"id\": \"Ratione molestiae expedita quam.\",\n      \"lastName\": \"Ad aut eius labore maiores eos omnis.\",\n      \"oldFirstName\": \"Debitis iste et consequatur fugiat.\",\n      \"oldLastName\": \"Mollitia sequi magnam et beatae in accusamus.\",\n      \"ts\": \"Rem dicta.\"\n   }'")
			}
		}
	}
	v := &notification.NotifyUserNamesUpdatePayload{
		ID:           message.Id,
		FirstName:    message.FirstName,
		OldFirstName: message.OldFirstName,
		LastName:     message.LastName,
		OldLastName:  message.OldLastName,
		Ts:           message.Ts,
	}

	return v, nil
}
