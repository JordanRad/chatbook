// Code generated by goa v3.11.3, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	auth "github.com/JordanRad/chatbook/services/internal/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// RefreshTokenRequestBody is the type of the "auth" service "refreshToken"
// endpoint HTTP request body.
type RefreshTokenRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// Refresh token
	RefreshToken string `form:"refreshToken" json:"refreshToken" xml:"refreshToken"`
}

// LoginRequestBody is the type of the "auth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User password
	Password string `form:"password" json:"password" xml:"password"`
}

// RefreshTokenResponseBody is the type of the "auth" service "refreshToken"
// endpoint HTTP response body.
type RefreshTokenResponseBody struct {
	// User's email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// JWT Token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// User's role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// User account's ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginResponseBody is the type of the "auth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// User's email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// JWT Token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// User's role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// User account's ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginWrongCredentialsResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "WrongCredentials" error.
type LoginWrongCredentialsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewRefreshTokenRequestBody builds the HTTP request body from the payload of
// the "refreshToken" endpoint of the "auth" service.
func NewRefreshTokenRequestBody(p *auth.RefreshTokenPayload) *RefreshTokenRequestBody {
	body := &RefreshTokenRequestBody{
		Email:        p.Email,
		RefreshToken: p.RefreshToken,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "auth" service.
func NewLoginRequestBody(p *auth.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewRefreshTokenLoginResponseOK builds a "auth" service "refreshToken"
// endpoint result from a HTTP "OK" response.
func NewRefreshTokenLoginResponseOK(body *RefreshTokenResponseBody) *auth.LoginResponse {
	v := &auth.LoginResponse{
		Email:        *body.Email,
		Token:        *body.Token,
		RefreshToken: *body.RefreshToken,
		Role:         *body.Role,
		ID:           body.ID,
	}

	return v
}

// NewLoginResponseOK builds a "auth" service "login" endpoint result from a
// HTTP "OK" response.
func NewLoginResponseOK(body *LoginResponseBody) *auth.LoginResponse {
	v := &auth.LoginResponse{
		Email:        *body.Email,
		Token:        *body.Token,
		RefreshToken: *body.RefreshToken,
		Role:         *body.Role,
		ID:           body.ID,
	}

	return v
}

// NewLoginWrongCredentials builds a auth service login endpoint
// WrongCredentials error.
func NewLoginWrongCredentials(body *LoginWrongCredentialsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRefreshTokenResponseBody runs the validations defined on
// RefreshTokenResponseBody
func ValidateRefreshTokenResponseBody(body *RefreshTokenResponseBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateLoginWrongCredentialsResponseBody runs the validations defined on
// login_WrongCredentials_response_body
func ValidateLoginWrongCredentialsResponseBody(body *LoginWrongCredentialsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
