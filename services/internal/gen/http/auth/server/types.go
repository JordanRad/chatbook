// Code generated by goa v3.11.3, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package server

import (
	auth "github.com/JordanRad/chatbook/services/internal/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// RefreshTokenRequestBody is the type of the "auth" service "refreshToken"
// endpoint HTTP request body.
type RefreshTokenRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Refresh token
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
}

// LoginRequestBody is the type of the "auth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RefreshTokenResponseBody is the type of the "auth" service "refreshToken"
// endpoint HTTP response body.
type RefreshTokenResponseBody struct {
	// User's email
	Email string `form:"email" json:"email" xml:"email"`
	// JWT Token
	Token string `form:"token" json:"token" xml:"token"`
	// Refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// User's role
	Role string `form:"role" json:"role" xml:"role"`
	// User account's ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginResponseBody is the type of the "auth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// User's email
	Email string `form:"email" json:"email" xml:"email"`
	// JWT Token
	Token string `form:"token" json:"token" xml:"token"`
	// Refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// User's role
	Role string `form:"role" json:"role" xml:"role"`
	// User account's ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginWrongCredentialsResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "WrongCredentials" error.
type LoginWrongCredentialsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewRefreshTokenResponseBody builds the HTTP response body from the result of
// the "refreshToken" endpoint of the "auth" service.
func NewRefreshTokenResponseBody(res *auth.LoginResponse) *RefreshTokenResponseBody {
	body := &RefreshTokenResponseBody{
		Email:        res.Email,
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		Role:         res.Role,
		ID:           res.ID,
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "auth" service.
func NewLoginResponseBody(res *auth.LoginResponse) *LoginResponseBody {
	body := &LoginResponseBody{
		Email:        res.Email,
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		Role:         res.Role,
		ID:           res.ID,
	}
	return body
}

// NewLoginWrongCredentialsResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "auth" service.
func NewLoginWrongCredentialsResponseBody(res *goa.ServiceError) *LoginWrongCredentialsResponseBody {
	body := &LoginWrongCredentialsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshTokenPayload builds a auth service refreshToken endpoint payload.
func NewRefreshTokenPayload(body *RefreshTokenRequestBody) *auth.RefreshTokenPayload {
	v := &auth.RefreshTokenPayload{
		Email:        *body.Email,
		RefreshToken: *body.RefreshToken,
	}

	return v
}

// NewLoginPayload builds a auth service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *auth.LoginPayload {
	v := &auth.LoginPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}

	return v
}

// ValidateRefreshTokenRequestBody runs the validations defined on
// RefreshTokenRequestBody
func ValidateRefreshTokenRequestBody(body *RefreshTokenRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refreshToken", "body"))
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
