// Code generated by goa v3.11.3, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	user "github.com/JordanRad/chatbook/services/internal/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "user" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// User first name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// User last name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User password
	Password string `form:"password" json:"password" xml:"password"`
	// Confirmed password of the user
	ConfirmedPassword string `form:"confirmedPassword" json:"confirmedPassword" xml:"confirmedPassword"`
}

// UpdateProfileNamesRequestBody is the type of the "user" service
// "updateProfileNames" endpoint HTTP request body.
type UpdateProfileNamesRequestBody struct {
	// Updated user first name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// Updated user last name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
}

// AddFriendRequestBody is the type of the "user" service "addFriend" endpoint
// HTTP request body.
type AddFriendRequestBody struct {
	// User ID
	ID string `form:"id" json:"id" xml:"id"`
}

// RegisterResponseBody is the type of the "user" service "register" endpoint
// HTTP response body.
type RegisterResponseBody struct {
	// Operation status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetProfileResponseBody is the type of the "user" service "getProfile"
// endpoint HTTP response body.
type GetProfileResponseBody struct {
	// User ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Friendslist
	FriendsList []*FriendResponseBody `form:"friendsList,omitempty" json:"friendsList,omitempty" xml:"friendsList,omitempty"`
}

// UpdateProfileNamesResponseBody is the type of the "user" service
// "updateProfileNames" endpoint HTTP response body.
type UpdateProfileNamesResponseBody struct {
	// Operation status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// AddFriendResponseBody is the type of the "user" service "addFriend" endpoint
// HTTP response body.
type AddFriendResponseBody struct {
	// Operation status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RemoveFriendResponseBody is the type of the "user" service "removeFriend"
// endpoint HTTP response body.
type RemoveFriendResponseBody struct {
	// Operation status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RegisterUniqueEmailErrorResponseBody is the type of the "user" service
// "register" endpoint HTTP response body for the "UniqueEmailError" error.
type RegisterUniqueEmailErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RegisterUnmatchingPassowrdsResponseBody is the type of the "user" service
// "register" endpoint HTTP response body for the "UnmatchingPassowrds" error.
type RegisterUnmatchingPassowrdsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// FriendResponseBody is used to define fields on response body types.
type FriendResponseBody struct {
	// User ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "user" service.
func NewRegisterRequestBody(p *user.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		FirstName:         p.FirstName,
		LastName:          p.LastName,
		Email:             p.Email,
		Password:          p.Password,
		ConfirmedPassword: p.ConfirmedPassword,
	}
	return body
}

// NewUpdateProfileNamesRequestBody builds the HTTP request body from the
// payload of the "updateProfileNames" endpoint of the "user" service.
func NewUpdateProfileNamesRequestBody(p *user.UpdateProfileNamesPayload) *UpdateProfileNamesRequestBody {
	body := &UpdateProfileNamesRequestBody{
		FirstName: p.FirstName,
		LastName:  p.LastName,
	}
	return body
}

// NewAddFriendRequestBody builds the HTTP request body from the payload of the
// "addFriend" endpoint of the "user" service.
func NewAddFriendRequestBody(p *user.AddFriendPayload) *AddFriendRequestBody {
	body := &AddFriendRequestBody{
		ID: p.ID,
	}
	return body
}

// NewRegisterResponseOK builds a "user" service "register" endpoint result
// from a HTTP "OK" response.
func NewRegisterResponseOK(body *RegisterResponseBody) *user.RegisterResponse {
	v := &user.RegisterResponse{
		Message: *body.Message,
	}

	return v
}

// NewRegisterUniqueEmailError builds a user service register endpoint
// UniqueEmailError error.
func NewRegisterUniqueEmailError(body *RegisterUniqueEmailErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRegisterUnmatchingPassowrds builds a user service register endpoint
// UnmatchingPassowrds error.
func NewRegisterUnmatchingPassowrds(body *RegisterUnmatchingPassowrdsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetProfileUserProfileResponseOK builds a "user" service "getProfile"
// endpoint result from a HTTP "OK" response.
func NewGetProfileUserProfileResponseOK(body *GetProfileResponseBody) *user.UserProfileResponse {
	v := &user.UserProfileResponse{
		ID:        *body.ID,
		Email:     *body.Email,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
	}
	v.FriendsList = make([]*user.Friend, len(body.FriendsList))
	for i, val := range body.FriendsList {
		v.FriendsList[i] = unmarshalFriendResponseBodyToUserFriend(val)
	}

	return v
}

// NewUpdateProfileNamesOperationStatusResponseOK builds a "user" service
// "updateProfileNames" endpoint result from a HTTP "OK" response.
func NewUpdateProfileNamesOperationStatusResponseOK(body *UpdateProfileNamesResponseBody) *user.OperationStatusResponse {
	v := &user.OperationStatusResponse{
		Message: *body.Message,
	}

	return v
}

// NewAddFriendOperationStatusResponseOK builds a "user" service "addFriend"
// endpoint result from a HTTP "OK" response.
func NewAddFriendOperationStatusResponseOK(body *AddFriendResponseBody) *user.OperationStatusResponse {
	v := &user.OperationStatusResponse{
		Message: *body.Message,
	}

	return v
}

// NewRemoveFriendOperationStatusResponseOK builds a "user" service
// "removeFriend" endpoint result from a HTTP "OK" response.
func NewRemoveFriendOperationStatusResponseOK(body *RemoveFriendResponseBody) *user.OperationStatusResponse {
	v := &user.OperationStatusResponse{
		Message: *body.Message,
	}

	return v
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetProfileResponseBody runs the validations defined on
// GetProfileResponseBody
func ValidateGetProfileResponseBody(body *GetProfileResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.FriendsList == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("friendsList", "body"))
	}
	for _, e := range body.FriendsList {
		if e != nil {
			if err2 := ValidateFriendResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateProfileNamesResponseBody runs the validations defined on
// UpdateProfileNamesResponseBody
func ValidateUpdateProfileNamesResponseBody(body *UpdateProfileNamesResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddFriendResponseBody runs the validations defined on
// AddFriendResponseBody
func ValidateAddFriendResponseBody(body *AddFriendResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveFriendResponseBody runs the validations defined on
// RemoveFriendResponseBody
func ValidateRemoveFriendResponseBody(body *RemoveFriendResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterUniqueEmailErrorResponseBody runs the validations defined on
// register_UniqueEmailError_response_body
func ValidateRegisterUniqueEmailErrorResponseBody(body *RegisterUniqueEmailErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRegisterUnmatchingPassowrdsResponseBody runs the validations defined
// on register_UnmatchingPassowrds_response_body
func ValidateRegisterUnmatchingPassowrdsResponseBody(body *RegisterUnmatchingPassowrdsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFriendResponseBody runs the validations defined on FriendResponseBody
func ValidateFriendResponseBody(body *FriendResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	return
}
