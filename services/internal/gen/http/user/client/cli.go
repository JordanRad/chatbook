// Code generated by goa v3.11.3, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	"encoding/json"
	"fmt"

	user "github.com/JordanRad/chatbook/services/internal/gen/user"
)

// BuildRegisterPayload builds the payload for the user register endpoint from
// CLI flags.
func BuildRegisterPayload(userRegisterBody string) (*user.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(userRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"confirmedPassword\": \"Magnam facilis incidunt occaecati consequatur ullam.\",\n      \"email\": \"Ducimus asperiores sunt.\",\n      \"firstName\": \"Qui impedit tempore sunt optio.\",\n      \"lastName\": \"Quisquam eos vitae velit quis.\",\n      \"password\": \"Adipisci qui suscipit ut.\"\n   }'")
		}
	}
	v := &user.RegisterPayload{
		FirstName:         body.FirstName,
		LastName:          body.LastName,
		Email:             body.Email,
		Password:          body.Password,
		ConfirmedPassword: body.ConfirmedPassword,
	}

	return v, nil
}

// BuildUpdateProfileNamesPayload builds the payload for the user
// updateProfileNames endpoint from CLI flags.
func BuildUpdateProfileNamesPayload(userUpdateProfileNamesBody string) (*user.UpdateProfileNamesPayload, error) {
	var err error
	var body UpdateProfileNamesRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateProfileNamesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"firstName\": \"Quibusdam qui.\",\n      \"lastName\": \"Tempora perspiciatis ut ut.\"\n   }'")
		}
	}
	v := &user.UpdateProfileNamesPayload{
		FirstName: body.FirstName,
		LastName:  body.LastName,
	}

	return v, nil
}
