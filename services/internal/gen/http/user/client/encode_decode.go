// Code generated by goa v3.11.3, DO NOT EDIT.
//
// user HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	user "github.com/JordanRad/chatbook/services/internal/gen/user"
	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "user" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterRequest returns an encoder for requests sent to the user
// register server.
func EncodeRegisterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*user.RegisterPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "register", "*user.RegisterPayload", v)
		}
		body := NewRegisterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user", "register", err)
		}
		return nil
	}
}

// DecodeRegisterResponse returns a decoder for responses returned by the user
// register endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRegisterResponse may return the following errors:
//   - "UniqueEmailError" (type *goa.ServiceError): http.StatusConflict
//   - "UnmatchingPassowrds" (type *goa.ServiceError): http.StatusConflict
//   - error: internal error
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "register", err)
			}
			err = ValidateRegisterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "register", err)
			}
			res := NewRegisterResponseOK(&body)
			return res, nil
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "UniqueEmailError":
				var (
					body RegisterUniqueEmailErrorResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("user", "register", err)
				}
				err = ValidateRegisterUniqueEmailErrorResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("user", "register", err)
				}
				return nil, NewRegisterUniqueEmailError(&body)
			case "UnmatchingPassowrds":
				var (
					body RegisterUnmatchingPassowrdsResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("user", "register", err)
				}
				err = ValidateRegisterUnmatchingPassowrdsResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("user", "register", err)
				}
				return nil, NewRegisterUnmatchingPassowrds(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("user", "register", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildGetProfileRequest instantiates a HTTP request object with method and
// path set to call the "user" service "getProfile" endpoint
func (c *Client) BuildGetProfileRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetProfileUserPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "getProfile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetProfileResponse returns a decoder for responses returned by the
// user getProfile endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetProfileResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "getProfile", err)
			}
			err = ValidateGetProfileResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "getProfile", err)
			}
			res := NewGetProfileUserProfileResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "getProfile", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateProfileNamesRequest instantiates a HTTP request object with
// method and path set to call the "user" service "updateProfileNames" endpoint
func (c *Client) BuildUpdateProfileNamesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProfileNamesUserPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "updateProfileNames", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateProfileNamesRequest returns an encoder for requests sent to the
// user updateProfileNames server.
func EncodeUpdateProfileNamesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*user.UpdateProfileNamesPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "updateProfileNames", "*user.UpdateProfileNamesPayload", v)
		}
		body := NewUpdateProfileNamesRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user", "updateProfileNames", err)
		}
		return nil
	}
}

// DecodeUpdateProfileNamesResponse returns a decoder for responses returned by
// the user updateProfileNames endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeUpdateProfileNamesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateProfileNamesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "updateProfileNames", err)
			}
			err = ValidateUpdateProfileNamesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "updateProfileNames", err)
			}
			res := NewUpdateProfileNamesOperationStatusResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "updateProfileNames", resp.StatusCode, string(body))
		}
	}
}

// BuildAddFriendRequest instantiates a HTTP request object with method and
// path set to call the "user" service "addFriend" endpoint
func (c *Client) BuildAddFriendRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*user.AddFriendPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user", "addFriend", "*user.AddFriendPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddFriendUserPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "addFriend", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddFriendResponse returns a decoder for responses returned by the user
// addFriend endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAddFriendResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddFriendResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "addFriend", err)
			}
			err = ValidateAddFriendResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "addFriend", err)
			}
			res := NewAddFriendOperationStatusResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "addFriend", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveFriendRequest instantiates a HTTP request object with method and
// path set to call the "user" service "removeFriend" endpoint
func (c *Client) BuildRemoveFriendRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*user.RemoveFriendPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user", "removeFriend", "*user.RemoveFriendPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveFriendUserPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "removeFriend", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveFriendResponse returns a decoder for responses returned by the
// user removeFriend endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRemoveFriendResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RemoveFriendResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "removeFriend", err)
			}
			err = ValidateRemoveFriendResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "removeFriend", err)
			}
			res := NewRemoveFriendOperationStatusResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "removeFriend", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFriendResponseBodyToUserFriend builds a value of type *user.Friend
// from a value of type *FriendResponseBody.
func unmarshalFriendResponseBodyToUserFriend(v *FriendResponseBody) *user.Friend {
	res := &user.Friend{
		ID:        *v.ID,
		Email:     *v.Email,
		FirstName: *v.FirstName,
		LastName:  *v.LastName,
	}

	return res
}
