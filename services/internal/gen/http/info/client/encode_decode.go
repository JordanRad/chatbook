// Code generated by goa v3.11.3, DO NOT EDIT.
//
// info HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetInfoRequest instantiates a HTTP request object with method and path
// set to call the "info" service "getInfo" endpoint
func (c *Client) BuildGetInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInfoInfoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("info", "getInfo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetInfoResponse returns a decoder for responses returned by the info
// getInfo endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("info", "getInfo", err)
			}
			err = ValidateGetInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("info", "getInfo", err)
			}
			res := NewGetInfoOperationStatusResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("info", "getInfo", resp.StatusCode, string(body))
		}
	}
}
