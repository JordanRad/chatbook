// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chat HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"unicode/utf8"

	chat "github.com/JordanRad/chatbook/services/internal/gen/chat"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetConversationHistoryResponse returns an encoder for responses
// returned by the chat getConversationHistory endpoint.
func EncodeGetConversationHistoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*chat.ChatHistoryResponse)
		enc := encoder(ctx, w)
		body := NewGetConversationHistoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetConversationHistoryRequest returns a decoder for requests sent to
// the chat getConversationHistory endpoint.
func DecodeGetConversationHistoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id              string
			limit           int
			beforeTimestamp int64
			err             error

			params = mux.Vars(r)
		)
		id = params["ID"]
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 200
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		{
			beforeTimestampRaw := r.URL.Query().Get("beforeTimestamp")
			if beforeTimestampRaw == "" {
				beforeTimestamp = 1257894000
			} else {
				v, err2 := strconv.ParseInt(beforeTimestampRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("beforeTimestamp", beforeTimestampRaw, "integer"))
				}
				beforeTimestamp = v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetConversationHistoryPayload(id, limit, beforeTimestamp)

		return payload, nil
	}
}

// EncodeSearchInConversationResponse returns an encoder for responses returned
// by the chat searchInConversation endpoint.
func EncodeSearchInConversationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*chat.ChatHistoryResponse)
		enc := encoder(ctx, w)
		body := NewSearchInConversationResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSearchInConversationRequest returns a decoder for requests sent to the
// chat searchInConversation endpoint.
func DecodeSearchInConversationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id          string
			limit       int
			searchInput string
			err         error

			params = mux.Vars(r)
		)
		id = params["ID"]
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 200
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		searchInputRaw := r.URL.Query().Get("searchInput")
		if searchInputRaw != "" {
			searchInput = searchInputRaw
		} else {
			searchInput = "200"
		}
		if utf8.RuneCountInString(searchInput) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("searchInput", searchInput, utf8.RuneCountInString(searchInput), 5, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSearchInConversationPayload(id, limit, searchInput)

		return payload, nil
	}
}

// EncodeGetConversationsListResponse returns an encoder for responses returned
// by the chat getConversationsList endpoint.
func EncodeGetConversationsListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*chat.ConversationsListResponse)
		enc := encoder(ctx, w)
		body := NewGetConversationsListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetConversationsListRequest returns a decoder for requests sent to the
// chat getConversationsList endpoint.
func DecodeGetConversationsListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			limit int
			err   error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 100
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetConversationsListPayload(limit)

		return payload, nil
	}
}

// EncodeAddConversationResponse returns an encoder for responses returned by
// the chat addConversation endpoint.
func EncodeAddConversationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*chat.OperationStatusResponse)
		enc := encoder(ctx, w)
		body := NewAddConversationResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddConversationRequest returns a decoder for requests sent to the chat
// addConversation endpoint.
func DecodeAddConversationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body AddConversationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddConversationRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddConversationPayload(&body)

		return payload, nil
	}
}

// marshalChatConversationMessageToConversationMessageResponseBody builds a
// value of type *ConversationMessageResponseBody from a value of type
// *chat.ConversationMessage.
func marshalChatConversationMessageToConversationMessageResponseBody(v *chat.ConversationMessage) *ConversationMessageResponseBody {
	res := &ConversationMessageResponseBody{
		SenderID:  v.SenderID,
		Timestamp: v.Timestamp,
		Content:   v.Content,
	}

	return res
}

// marshalChatConversationToConversationResponseBody builds a value of type
// *ConversationResponseBody from a value of type *chat.Conversation.
func marshalChatConversationToConversationResponseBody(v *chat.Conversation) *ConversationResponseBody {
	res := &ConversationResponseBody{
		ID:                     v.ID,
		LastMessageSenderID:    v.LastMessageSenderID,
		LastMessageContent:     v.LastMessageContent,
		LastMessageDeliveredAt: v.LastMessageDeliveredAt,
		OtherParticipantID:     v.OtherParticipantID,
	}

	return res
}

// unmarshalFriendRequestBodyToChatFriend builds a value of type *chat.Friend
// from a value of type *FriendRequestBody.
func unmarshalFriendRequestBodyToChatFriend(v *FriendRequestBody) *chat.Friend {
	res := &chat.Friend{
		ID:        *v.ID,
		Email:     *v.Email,
		FirstName: *v.FirstName,
		LastName:  *v.LastName,
	}

	return res
}
