// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chat HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package server

import (
	"context"
	"net/http"

	chat "github.com/JordanRad/chatbook/services/internal/gen/chat"
	goahttp "goa.design/goa/v3/http"
)

// EncodeGetChatHistoryResponse returns an encoder for responses returned by
// the chat getChatHistory endpoint.
func EncodeGetChatHistoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*chat.ChatHistoryResponse)
		enc := encoder(ctx, w)
		body := NewGetChatHistoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetChatHistoryRequest returns a decoder for requests sent to the chat
// getChatHistory endpoint.
func DecodeGetChatHistoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["ID"]
		payload := NewGetChatHistoryPayload(id)

		return payload, nil
	}
}

// marshalChatChatMessageToChatMessageResponseBody builds a value of type
// *ChatMessageResponseBody from a value of type *chat.ChatMessage.
func marshalChatChatMessageToChatMessageResponseBody(v *chat.ChatMessage) *ChatMessageResponseBody {
	res := &ChatMessageResponseBody{
		PreviousMessageID: v.PreviousMessageID,
		NextMessageID:     v.NextMessageID,
		Timestamp:         v.Timestamp,
	}

	return res
}
