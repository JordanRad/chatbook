// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chat HTTP server types
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package server

import (
	chat "github.com/JordanRad/chatbook/services/internal/gen/chat"
)

// GetChatHistoryResponseBody is the type of the "chat" service
// "getChatHistory" endpoint HTTP response body.
type GetChatHistoryResponseBody struct {
	// Chatroom ID
	ID string `form:"id" json:"id" xml:"id"`
	// Messages Count
	Count int `form:"count" json:"count" xml:"count"`
	// Chat history
	Messages []*ChatMessageResponseBody `form:"messages" json:"messages" xml:"messages"`
}

// ChatMessageResponseBody is used to define fields on response body types.
type ChatMessageResponseBody struct {
	// Previous message ID
	PreviousMessageID string `form:"previousMessageID" json:"previousMessageID" xml:"previousMessageID"`
	// Next message ID
	NextMessageID string `form:"nextMessageID" json:"nextMessageID" xml:"nextMessageID"`
	// Timestamp of the message
	Timestamp float64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// NewGetChatHistoryResponseBody builds the HTTP response body from the result
// of the "getChatHistory" endpoint of the "chat" service.
func NewGetChatHistoryResponseBody(res *chat.ChatHistoryResponse) *GetChatHistoryResponseBody {
	body := &GetChatHistoryResponseBody{
		ID:    res.ID,
		Count: res.Count,
	}
	if res.Messages != nil {
		body.Messages = make([]*ChatMessageResponseBody, len(res.Messages))
		for i, val := range res.Messages {
			body.Messages[i] = marshalChatChatMessageToChatMessageResponseBody(val)
		}
	}
	return body
}

// NewGetChatHistoryPayload builds a chat service getChatHistory endpoint
// payload.
func NewGetChatHistoryPayload(id string) *chat.GetChatHistoryPayload {
	v := &chat.GetChatHistoryPayload{}
	v.ID = &id

	return v
}
