// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chat HTTP client types
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	chat "github.com/JordanRad/chatbook/services/internal/gen/chat"
	goa "goa.design/goa/v3/pkg"
)

// GetChatHistoryResponseBody is the type of the "chat" service
// "getChatHistory" endpoint HTTP response body.
type GetChatHistoryResponseBody struct {
	// Chatroom ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Messages Count
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// Chat history
	Messages []*ChatMessageResponseBody `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
}

// ChatMessageResponseBody is used to define fields on response body types.
type ChatMessageResponseBody struct {
	// Previous message ID
	PreviousMessageID *string `form:"previousMessageID,omitempty" json:"previousMessageID,omitempty" xml:"previousMessageID,omitempty"`
	// Next message ID
	NextMessageID *string `form:"nextMessageID,omitempty" json:"nextMessageID,omitempty" xml:"nextMessageID,omitempty"`
	// Timestamp of the message
	Timestamp *float64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// NewGetChatHistoryChatHistoryResponseOK builds a "chat" service
// "getChatHistory" endpoint result from a HTTP "OK" response.
func NewGetChatHistoryChatHistoryResponseOK(body *GetChatHistoryResponseBody) *chat.ChatHistoryResponse {
	v := &chat.ChatHistoryResponse{
		ID:    *body.ID,
		Count: *body.Count,
	}
	v.Messages = make([]*chat.ChatMessage, len(body.Messages))
	for i, val := range body.Messages {
		v.Messages[i] = unmarshalChatMessageResponseBodyToChatChatMessage(val)
	}

	return v
}

// ValidateGetChatHistoryResponseBody runs the validations defined on
// GetChatHistoryResponseBody
func ValidateGetChatHistoryResponseBody(body *GetChatHistoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	if body.Messages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("messages", "body"))
	}
	for _, e := range body.Messages {
		if e != nil {
			if err2 := ValidateChatMessageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChatMessageResponseBody runs the validations defined on
// ChatMessageResponseBody
func ValidateChatMessageResponseBody(body *ChatMessageResponseBody) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.PreviousMessageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("previousMessageID", "body"))
	}
	if body.NextMessageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nextMessageID", "body"))
	}
	return
}
