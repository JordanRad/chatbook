// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chat HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	chat "github.com/JordanRad/chatbook/services/internal/gen/chat"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetChatHistoryRequest instantiates a HTTP request object with method
// and path set to call the "chat" service "getChatHistory" endpoint
func (c *Client) BuildGetChatHistoryRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*chat.GetChatHistoryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("chat", "getChatHistory", "*chat.GetChatHistoryPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetChatHistoryChatPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("chat", "getChatHistory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetChatHistoryResponse returns a decoder for responses returned by the
// chat getChatHistory endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetChatHistoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetChatHistoryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "getChatHistory", err)
			}
			err = ValidateGetChatHistoryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "getChatHistory", err)
			}
			res := NewGetChatHistoryChatHistoryResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("chat", "getChatHistory", resp.StatusCode, string(body))
		}
	}
}

// unmarshalChatMessageResponseBodyToChatChatMessage builds a value of type
// *chat.ChatMessage from a value of type *ChatMessageResponseBody.
func unmarshalChatMessageResponseBodyToChatChatMessage(v *ChatMessageResponseBody) *chat.ChatMessage {
	res := &chat.ChatMessage{
		PreviousMessageID: *v.PreviousMessageID,
		NextMessageID:     *v.NextMessageID,
		Timestamp:         *v.Timestamp,
	}

	return res
}
