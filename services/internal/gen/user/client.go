// Code generated by goa v3.11.3, DO NOT EDIT.
//
// user client
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "user" service client.
type Client struct {
	RegisterEndpoint           goa.Endpoint
	GetProfileEndpoint         goa.Endpoint
	UpdateProfileNamesEndpoint goa.Endpoint
	AddFriendEndpoint          goa.Endpoint
	RemoveFriendEndpoint       goa.Endpoint
}

// NewClient initializes a "user" service client given the endpoints.
func NewClient(register, getProfile, updateProfileNames, addFriend, removeFriend goa.Endpoint) *Client {
	return &Client{
		RegisterEndpoint:           register,
		GetProfileEndpoint:         getProfile,
		UpdateProfileNamesEndpoint: updateProfileNames,
		AddFriendEndpoint:          addFriend,
		RemoveFriendEndpoint:       removeFriend,
	}
}

// Register calls the "register" endpoint of the "user" service.
// Register may return the following errors:
//   - "UniqueEmailError" (type *goa.ServiceError)
//   - "UnmatchingPassowrds" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) Register(ctx context.Context, p *RegisterPayload) (res *RegisterResponse, err error) {
	var ires any
	ires, err = c.RegisterEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RegisterResponse), nil
}

// GetProfile calls the "getProfile" endpoint of the "user" service.
func (c *Client) GetProfile(ctx context.Context) (res *UserProfileResponse, err error) {
	var ires any
	ires, err = c.GetProfileEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*UserProfileResponse), nil
}

// UpdateProfileNames calls the "updateProfileNames" endpoint of the "user"
// service.
func (c *Client) UpdateProfileNames(ctx context.Context, p *UpdateProfileNamesPayload) (res *OperationStatusResponse, err error) {
	var ires any
	ires, err = c.UpdateProfileNamesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OperationStatusResponse), nil
}

// AddFriend calls the "addFriend" endpoint of the "user" service.
func (c *Client) AddFriend(ctx context.Context, p *AddFriendPayload) (res *OperationStatusResponse, err error) {
	var ires any
	ires, err = c.AddFriendEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OperationStatusResponse), nil
}

// RemoveFriend calls the "removeFriend" endpoint of the "user" service.
func (c *Client) RemoveFriend(ctx context.Context, p *RemoveFriendPayload) (res *OperationStatusResponse, err error) {
	var ires any
	ires, err = c.RemoveFriendEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OperationStatusResponse), nil
}
