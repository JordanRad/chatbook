// Code generated by goa v3.11.3, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// User service is responsible for handling user data and requests
type Service interface {
	// Register implements register.
	Register(context.Context, *RegisterPayload) (res *RegisterResponse, err error)
	// GetProfile implements getProfile.
	GetProfile(context.Context) (res *UserProfileResponse, err error)
	// UpdateProfileNames implements updateProfileNames.
	UpdateProfileNames(context.Context, *UpdateProfileNamesPayload) (res *OperationStatusResponse, err error)
	// AddFriend implements addFriend.
	AddFriend(context.Context, *AddFriendPayload) (res *OperationStatusResponse, err error)
	// RemoveFriend implements removeFriend.
	RemoveFriend(context.Context, *RemoveFriendPayload) (res *OperationStatusResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"register", "getProfile", "updateProfileNames", "addFriend", "removeFriend"}

// AddFriendPayload is the payload type of the user service addFriend method.
type AddFriendPayload struct {
	// User ID
	ID string
}

type Friend struct {
	// User ID
	ID string
	// Email
	Email string
	// First name
	FirstName string
	// Last name
	LastName string
}

// OperationStatusResponse is the result type of the user service
// updateProfileNames method.
type OperationStatusResponse struct {
	// Operation status
	Message string
}

// RegisterPayload is the payload type of the user service register method.
type RegisterPayload struct {
	// User first name
	FirstName string
	// User last name
	LastName string
	// User email
	Email string
	// User password
	Password string
	// Confirmed password of the user
	ConfirmedPassword string
}

// RegisterResponse is the result type of the user service register method.
type RegisterResponse struct {
	// Operation status
	Message string
}

// RemoveFriendPayload is the payload type of the user service removeFriend
// method.
type RemoveFriendPayload struct {
	// User ID
	ID string
}

// UpdateProfileNamesPayload is the payload type of the user service
// updateProfileNames method.
type UpdateProfileNamesPayload struct {
	// Updated user first name
	FirstName string
	// Updated user last name
	LastName string
}

// UserProfileResponse is the result type of the user service getProfile method.
type UserProfileResponse struct {
	// User ID
	ID string
	// Email
	Email string
	// First name
	FirstName string
	// Last name
	LastName string
	// Friendslist
	FriendsList []*Friend
}

// MakeUniqueEmailError builds a goa.ServiceError from an error.
func MakeUniqueEmailError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "UniqueEmailError", false, false, false)
}

// MakeUnmatchingPassowrds builds a goa.ServiceError from an error.
func MakeUnmatchingPassowrds(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "UnmatchingPassowrds", false, false, false)
}
