// Code generated by goa v3.11.3, DO NOT EDIT.
//
// user endpoints
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "user" service endpoints.
type Endpoints struct {
	Register           goa.Endpoint
	GetUserProfile     goa.Endpoint
	UpdateProfileNames goa.Endpoint
}

// NewEndpoints wraps the methods of the "user" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Register:           NewRegisterEndpoint(s),
		GetUserProfile:     NewGetUserProfileEndpoint(s),
		UpdateProfileNames: NewUpdateProfileNamesEndpoint(s),
	}
}

// Use applies the given middleware to all the "user" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
	e.GetUserProfile = m(e.GetUserProfile)
	e.UpdateProfileNames = m(e.UpdateProfileNames)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "user".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RegisterPayload)
		return s.Register(ctx, p)
	}
}

// NewGetUserProfileEndpoint returns an endpoint function that calls the method
// "getUserProfile" of service "user".
func NewGetUserProfileEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetUserProfile(ctx)
	}
}

// NewUpdateProfileNamesEndpoint returns an endpoint function that calls the
// method "updateProfileNames" of service "user".
func NewUpdateProfileNamesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateProfileNamesPayload)
		return s.UpdateProfileNames(ctx, p)
	}
}
