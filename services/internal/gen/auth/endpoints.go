// Code generated by goa v3.11.3, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	RefreshToken goa.Endpoint
	Login        goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		RefreshToken: NewRefreshTokenEndpoint(s),
		Login:        NewLoginEndpoint(s),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.RefreshToken = m(e.RefreshToken)
	e.Login = m(e.Login)
}

// NewRefreshTokenEndpoint returns an endpoint function that calls the method
// "refreshToken" of service "auth".
func NewRefreshTokenEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RefreshTokenPayload)
		return s.RefreshToken(ctx, p)
	}
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "auth".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}
