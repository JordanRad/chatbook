// Code generated by goa v3.11.3, DO NOT EDIT.
//
// chat service
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package chat

import (
	"context"
)

// User service is responsible for handling user data and requests
type Service interface {
	// GetConversationHistory implements getConversationHistory.
	GetConversationHistory(context.Context, *GetConversationHistoryPayload) (res *ChatHistoryResponse, err error)
	// SearchInConversation implements searchInConversation.
	SearchInConversation(context.Context, *SearchInConversationPayload) (res *ChatHistoryResponse, err error)
	// GetConversationsList implements getConversationsList.
	GetConversationsList(context.Context, *GetConversationsListPayload) (res *ConversationsListResponse, err error)
	// AddConversation implements addConversation.
	AddConversation(context.Context, *AddConversationPayload) (res *OperationStatusResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "chat"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"getConversationHistory", "searchInConversation", "getConversationsList", "addConversation"}

// AddConversationPayload is the payload type of the chat service
// addConversation method.
type AddConversationPayload struct {
	// Participants
	Participants []*Friend
}

// ChatHistoryResponse is the result type of the chat service
// getConversationHistory method.
type ChatHistoryResponse struct {
	// Chatroom ID
	ID string
	// Messages Count
	Count int
	// Chat history
	Messages []*ConversationMessage
}

type Conversation struct {
	// Conversation ID
	ID string
	// Sender ID
	LastMessageSenderID string
	// Last message
	LastMessageContent string
	// TS for delivered time
	LastMessageDeliveredAt string
	// TS for delivered time
	OtherParticipantID string
}

type ConversationMessage struct {
	// Sender ID
	SenderID string
	// Timestamp of the message
	Timestamp string
	// Message Content
	Content string
}

// ConversationsListResponse is the result type of the chat service
// getConversationsList method.
type ConversationsListResponse struct {
	// Messages Count
	Total int
	// Chat history
	Resources []*Conversation
}

type Friend struct {
	// User ID
	ID string
	// Email
	Email string
	// First name
	FirstName string
	// Last name
	LastName string
}

// GetConversationHistoryPayload is the payload type of the chat service
// getConversationHistory method.
type GetConversationHistoryPayload struct {
	// Conversation ID
	ID string
	// Messages count
	Limit int
	// Before timestamp
	BeforeTimestamp string
}

// GetConversationsListPayload is the payload type of the chat service
// getConversationsList method.
type GetConversationsListPayload struct {
	// Messages count
	Limit int
}

// OperationStatusResponse is the result type of the chat service
// addConversation method.
type OperationStatusResponse struct {
	// Operation status
	Message string
}

// SearchInConversationPayload is the payload type of the chat service
// searchInConversation method.
type SearchInConversationPayload struct {
	// Conversation ID
	ID string
	// Messages count
	Limit int
	// Input
	SearchInput string
}
