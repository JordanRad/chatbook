// Code generated by goa v3.11.3, DO NOT EDIT.
//
// notification endpoints
//
// Command:
// $ goa gen github.com/JordanRad/chatbook/services/internal/design -o
// ./internal

package notification

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "notification" service endpoints.
type Endpoints struct {
	NotifyUserNamesUpdate goa.Endpoint
}

// NewEndpoints wraps the methods of the "notification" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		NotifyUserNamesUpdate: NewNotifyUserNamesUpdateEndpoint(s),
	}
}

// Use applies the given middleware to all the "notification" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.NotifyUserNamesUpdate = m(e.NotifyUserNamesUpdate)
}

// NewNotifyUserNamesUpdateEndpoint returns an endpoint function that calls the
// method "notifyUserNamesUpdate" of service "notification".
func NewNotifyUserNamesUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*NotifyUserNamesUpdatePayload)
		return nil, s.NotifyUserNamesUpdate(ctx, p)
	}
}
